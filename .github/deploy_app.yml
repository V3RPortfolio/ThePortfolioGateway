name: Deploy API Gateway Application
'on':
  workflow_dispatch: {}
env:
  # Secrets
  HOST: '${{ secrets.HOST }}'
  USERNAME: '${{ secrets.USERNAME }}'
  PASSWORD: '${{ secrets.PASSWORD }}'

  APIGATEWAY_DB_HOST: '${{ secrets.APIGATEWAY_DB_HOST }}'
  APIGATEWAY_DB_PORT: '1433'
  APIGATEWAY_ADMIN_DB_USERNAME: 'sa'
  APIGATEWAY_ADMIN_DB_PASSWORD: '${{ secrets.APIGATEWAY_ADMIN_DB_PASSWORD }}'

  REMOTE_API_GATEWAY_DIRECTORY: '${{ secrets.REMOTE_API_GATEWAY_DIRECTORY }}'
  GTHB_PAT: '${{ secrets.GTHB_PAT }}'

  AUTHENTICATION_SERVICE: 'authenticationservice'
  AUTHENTICATION_SERVICE_PORT: '${{ vars.DJANGO_ADMIN_LOCAL_PORT }}'

  CMS_SERVICE: 'cms'
  CMS_SERVICE_PORT: '8080'
  CMS_SERVICE_AUTHORIZATION: '${{ secrets.WORDPRESS_DB_USER }}:${{ secrets.WORDPRESS_DB_PASSWORD }}'

  AUTHENTICATION_SERVICE_JWT_ISSUER: ''
  AUTHENTICATION_SERVICE_JWT_KEY: '${{ secrets.DJANGO_JWT_SECRET_KEY }}'

  # Variables
  MODE: prod

jobs:
  deploy:
    name: Deploying API_GATEWAY application
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Update submodule
        run: git submodule update --recursive --remote

      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Create ssh directory
        run: mkdir ~/.ssh

      - name: Add ssh known hosts
        run: ssh-keyscan $HOST >> ~/.ssh/known_hosts

      - name: Copy contents of password to SSH key
        run: echo "$PASSWORD" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa && chmod 700 ~/.ssh


      - name: Generate env file
        run: |
          echo "ASPNETCORE_ENVIRONMENT=$MODE" >> .env
          echo "APPLICATION_HOST=https://gateway.vip3rtech6069.com" >> .env
          echo "IS_DOCKER_ENVIRONMENT=True" >> .env
          cat .env
        working-directory: ThePortfolioGateway


      - name: Generate appsettings file
        run: |
          python3 - <<'PY'
          import os, sys, base64
          from pathlib import Path
          TARGET_FILE = "appsettings.Production.json"
          p = Path(TARGET_FILE)
          if not p.is_file():
              print(f"Error: {TARGET_FILE} not found in {p.cwd()}")
              sys.exit(1)
          replacements = {
              "#AuthenticationServiceHost": os.getenv("AUTHENTICATION_SERVICE", ""),
              '"#AuthenticationServicePort"': os.getenv("AUTHENTICATION_SERVICE_PORT", ""),
              "#CMSServiceHost": os.getenv("CMS_SERVICE", ""),
              '"#CMSServicePort"': os.getenv("CMS_SERVICE_PORT", ""),
              "#CMSServiceAuthorization": "Basic " + base64.b64encode(bytes(os.getenv("CMS_SERVICE_AUTHORIZATION", ""), 'utf-8')).decode('utf-8'),
              "#DBHost": os.getenv("APIGATEWAY_DB_HOST", ""),
              '"#DBPort"': os.getenv("APIGATEWAY_DB_PORT", ""),
              "#DBPassword": os.getenv("APIGATEWAY_ADMIN_DB_PASSWORD", ""),
              "#DBUsername": os.getenv("APIGATEWAY_ADMIN_DB_USERNAME", ""),
              "#JWTIssuer": os.getenv("AUTHENTICATION_SERVICE_JWT_ISSUER", ""),
              "#JWTKey": os.getenv("AUTHENTICATION_SERVICE_JWT_KEY", ""),
          }
          content = p.read_text(encoding='utf-8')
          for k, v in replacements.items():
              content = content.replace(k, v)          
          output_file = "appsettings.Docker.json"
          p.with_name(output_file).write_text(content, encoding='utf-8')
          print(f"Updated {output_file}")
          PY

        working-directory: ThePortfolioGateway/AuthenticationService

      - name: Deploy Resource Management Application
        run: |
          chmod +x build-tools/deployment.sh && ./build-tools/deployment.sh -m $MODE -i $HOST -u $USERNAME -s ~/.ssh/id_rsa -c authenticationservice -d $(pwd) -a the_portfolio_gateway -r "$REMOTE_API_GATEWAY_DIRECTORY"
        working-directory: ThePortfolioGateway